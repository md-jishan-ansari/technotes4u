// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Editor {
    RichEditor
    MdxEditor
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  blogs         Blog[]
  comments      Comment[]
  role          Role @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Blog {
  // Primary identifier
  id            String    @id @default(cuid())

  // Core fields
  name          String    @unique
  slug          String    @unique
  description   String?   // For both blog and Blog descriptions
  content       String?   // For blog content
  draftContent  String?   // For draftblog content
  mdxcontent       String?   // For blog content of mdx editor
  mdxdraftContent  String?   // For draftblog content of mdx editor


  // Status and metadata
  isFeatured    Boolean   @default(false)
  isPublished   Boolean   @default(false)
  editor        Editor    @default(MdxEditor)
  viewCount     Int       @default(0)
  sortOrder     Int?      // For sorting
  iconImage     Json?

  // Relationships
  userId        String?
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Self-referential relationship
  parentId      String?
  parent        Blog?     @relation("BlogToBlog", fields: [parentId], references: [id], onDelete: SetNull)
  children      Blog[]    @relation("BlogToBlog")
  commments      Comment[]

  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// iconImage
// {
//     "url": "https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/threedsmax/threedsmax-plain.svg",
//     "darkUrl": "https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/threedsmax/threedsmax-original.svg"
// }

model Comment {
  id        String    @id @default(cuid())
  content   String
  userId    String?
  blogId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  blog      Blog?     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  // Self-referential relationship for replies
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[] @relation("CommentReplies")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}